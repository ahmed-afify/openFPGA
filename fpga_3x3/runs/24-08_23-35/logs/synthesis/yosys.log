
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 347dd01, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/arch_encoder.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/arch_encoder.v' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cbx_1_0.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cbx_1_0.v' to AST representation.
Generating RTLIL representation for module `\cbx_1__0_'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cbx_1_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cbx_1_1.v' to AST representation.
Generating RTLIL representation for module `\cbx_1__1_'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cbx_1_3.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cbx_1_3.v' to AST representation.
Generating RTLIL representation for module `\cbx_1__3_'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cby_0_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cby_0_1.v' to AST representation.
Generating RTLIL representation for module `\cby_0__1_'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cby_1_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cby_1_1.v' to AST representation.
Generating RTLIL representation for module `\cby_1__1_'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/cby_3_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/cby_3_1.v' to AST representation.
Generating RTLIL representation for module `\cby_3__1_'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/clb.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/clb.v' to AST representation.
Generating RTLIL representation for module `\grid_clb'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/fpga_defines.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/fpga_defines.v' to AST representation.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:59)
Warning: Yosys has only limited support for tri-state logic at the moment. (/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:100)
Warning: Yosys has only limited support for tri-state logic at the moment. (/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:142)
Warning: Yosys has only limited support for tri-state logic at the moment. (/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:189)
Generating RTLIL representation for module `\const0'.
Generating RTLIL representation for module `\const1'.
Generating RTLIL representation for module `\INVTX1'.
/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:59: Warning: Identifier `\$random' is implicitly declared.
Generating RTLIL representation for module `\buf4'.
/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:100: Warning: Identifier `\$random' is implicitly declared.
Generating RTLIL representation for module `\tap_buf4'.
/openLANE_flow/designs/fpga_3x3/src/inv_buf_passgate.v:142: Warning: Identifier `\$random' is implicitly declared.
Generating RTLIL representation for module `\TGATE'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/io_bottom.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/io_bottom.v' to AST representation.
Generating RTLIL representation for module `\grid_io_bottom'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/io_left.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/io_left.v' to AST representation.
Generating RTLIL representation for module `\grid_io_left'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/io_right.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/io_right.v' to AST representation.
Generating RTLIL representation for module `\grid_io_right'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/io_top.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/io_top.v' to AST representation.
Generating RTLIL representation for module `\grid_io_top'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/local_encoder.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/local_encoder.v' to AST representation.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/logical_tile_clb.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/logical_tile_clb.v' to AST representation.
Generating RTLIL representation for module `\logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4_mode_default__lut4'.
Generating RTLIL representation for module `\logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4_mode_default__ff'.
Generating RTLIL representation for module `\logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4'.
Generating RTLIL representation for module `\logical_tile_clb_mode_default__fle'.
Generating RTLIL representation for module `\logical_tile_clb_mode_clb_'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/logical_tile_io.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/logical_tile_io.v' to AST representation.
Generating RTLIL representation for module `\logical_tile_io_mode_physical__iopad'.
Generating RTLIL representation for module `\logical_tile_io_mode_io_'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/luts.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/luts.v' to AST representation.
Generating RTLIL representation for module `\lut4'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/memories.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/memories.v' to AST representation.
Generating RTLIL representation for module `\mux_2level_tapbuf_size6_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size2_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size8_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size9_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size3_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size5_mem'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size4_mem'.
Generating RTLIL representation for module `\mux_2level_size14_mem'.
Generating RTLIL representation for module `\mux_1level_tapbuf_size2_mem'.
Generating RTLIL representation for module `\lut4_sc_dff_compact_mem'.
Generating RTLIL representation for module `\iopad_sc_dff_compact_mem'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/muxes.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/muxes.v' to AST representation.
Generating RTLIL representation for module `\mux_2level_tapbuf_size6_basis_size3'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size2_basis_size2'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size8_basis_size3'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size9_basis_size4'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size3_basis_size2'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size5_basis_size3'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size5_basis_size2'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size4_basis_size3'.
Generating RTLIL representation for module `\mux_2level_size14_basis_size4'.
Generating RTLIL representation for module `\mux_2level_size14_basis_size3'.
Generating RTLIL representation for module `\mux_1level_tapbuf_size2_basis_size3'.
Generating RTLIL representation for module `\lut4_mux_basis_size2'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size6'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size2'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size8'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size9'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size3'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size5'.
Generating RTLIL representation for module `\mux_2level_tapbuf_size4'.
Generating RTLIL representation for module `\mux_2level_size14'.
Generating RTLIL representation for module `\mux_1level_tapbuf_size2'.
Generating RTLIL representation for module `\lut4_mux'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/openlane_src_cells.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/openlane_src_cells.v' to AST representation.
Generating RTLIL representation for module `\sky130_fd_sc_hd__inv_1'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__inv_2'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__inv_4'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__buf_1'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__buf_2'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__buf_4'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__or2_1'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__mux2_1'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__dfrbp'.
Generating RTLIL representation for module `\sky130_fd_sc_hd__dfbbp'.
Generating RTLIL representation for module `\iopad'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_0_0.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_0_0.v' to AST representation.
Generating RTLIL representation for module `\sb_0__0_'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_0_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_0_1.v' to AST representation.
Generating RTLIL representation for module `\sb_0__1_'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_0_3.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_0_3.v' to AST representation.
Generating RTLIL representation for module `\sb_0__3_'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_1_0.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_1_0.v' to AST representation.
Generating RTLIL representation for module `\sb_1__0_'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_1_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_1_1.v' to AST representation.
Generating RTLIL representation for module `\sb_1__1_'.
Successfully finished Verilog frontend.

27. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_1_3.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_1_3.v' to AST representation.
Generating RTLIL representation for module `\sb_1__3_'.
Successfully finished Verilog frontend.

28. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_3_0.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_3_0.v' to AST representation.
Generating RTLIL representation for module `\sb_3__0_'.
Successfully finished Verilog frontend.

29. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_3_1.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_3_1.v' to AST representation.
Generating RTLIL representation for module `\sb_3__1_'.
Successfully finished Verilog frontend.

30. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/sb_3_3.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/sb_3_3.v' to AST representation.
Generating RTLIL representation for module `\sb_3__3_'.
Successfully finished Verilog frontend.

31. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/user_defined_templates.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/user_defined_templates.v' to AST representation.
Generating RTLIL representation for module `\static_dff'.
Generating RTLIL representation for module `\sc_dff_compact'.
Successfully finished Verilog frontend.

32. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/wires.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/wires.v' to AST representation.
Generating RTLIL representation for module `\direct_interc'.
Successfully finished Verilog frontend.

33. Executing Verilog-2005 frontend: /openLANE_flow/designs/fpga_3x3/src/fpga_3x3.v
Parsing Verilog input from `/openLANE_flow/designs/fpga_3x3/src/fpga_3x3.v' to AST representation.
Generating RTLIL representation for module `\fpga_3x3'.
Successfully finished Verilog frontend.

34. Executing HIERARCHY pass (managing design hierarchy).

34.1. Analyzing design hierarchy..
Top module:  \fpga_3x3
Used module:     \cby_3__1_
Used module:         \mux_2level_tapbuf_size2_mem
Used module:             \sc_dff_compact
Used module:         \mux_2level_tapbuf_size2
Used module:             \mux_2level_tapbuf_size2_basis_size2
Used module:                 \TGATE
Used module:             \tap_buf4
Used module:             \const1
Used module:             \INVTX1
Used module:         \mux_2level_tapbuf_size6_mem
Used module:         \mux_2level_tapbuf_size6
Used module:             \mux_2level_tapbuf_size6_basis_size3
Used module:     \cby_1__1_
Used module:     \cby_0__1_
Used module:     \cbx_1__3_
Used module:     \cbx_1__1_
Used module:     \cbx_1__0_
Used module:     \sb_3__3_
Used module:     \sb_3__1_
Used module:         \mux_2level_tapbuf_size3_mem
Used module:         \mux_2level_tapbuf_size3
Used module:             \mux_2level_tapbuf_size3_basis_size2
Used module:         \mux_2level_tapbuf_size8_mem
Used module:         \mux_2level_tapbuf_size8
Used module:             \mux_2level_tapbuf_size8_basis_size3
Used module:     \sb_3__0_
Used module:     \sb_1__3_
Used module:     \sb_1__1_
Used module:         \mux_2level_tapbuf_size9_mem
Used module:         \mux_2level_tapbuf_size9
Used module:             \mux_2level_tapbuf_size9_basis_size4
Used module:     \sb_1__0_
Used module:         \mux_2level_tapbuf_size4_mem
Used module:         \mux_2level_tapbuf_size4
Used module:             \mux_2level_tapbuf_size4_basis_size3
Used module:         \mux_2level_tapbuf_size5_mem
Used module:         \mux_2level_tapbuf_size5
Used module:             \mux_2level_tapbuf_size5_basis_size2
Used module:             \mux_2level_tapbuf_size5_basis_size3
Used module:     \sb_0__3_
Used module:     \sb_0__1_
Used module:     \sb_0__0_
Used module:     \grid_io_left
Used module:         \logical_tile_io_mode_io_
Used module:             \direct_interc
Used module:             \logical_tile_io_mode_physical__iopad
Used module:                 \iopad_sc_dff_compact_mem
Used module:     \grid_io_bottom
Used module:     \grid_io_right
Used module:     \grid_io_top
Used module:     \grid_clb
Used module:         \logical_tile_clb_mode_clb_
Used module:             \mux_2level_size14_mem
Used module:             \mux_2level_size14
Used module:                 \mux_2level_size14_basis_size3
Used module:                 \mux_2level_size14_basis_size4
Used module:             \logical_tile_clb_mode_default__fle
Used module:                 \logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4
Used module:                     \mux_1level_tapbuf_size2_mem
Used module:                     \mux_1level_tapbuf_size2
Used module:                         \mux_1level_tapbuf_size2_basis_size3
Used module:                     \logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4_mode_default__ff
Used module:                         \static_dff
Used module:                     \logical_tile_clb_mode_default__fle_mode_n1_lut4__ble4_mode_default__lut4
Used module:                         \lut4_sc_dff_compact_mem
Used module:                         \lut4
Used module:                             \lut4_mux
Used module:                                 \lut4_mux_basis_size2
Used module:                             \buf4
ERROR: Module `\sky130_fd_sc_hd__dfrbp_1' referenced in module `\sc_dff_compact' in cell `\sky130_fd_sc_hd__dfrbp_1' is not part of the design.
